context:
  name: numba
  version: 0.61.2
  sha256: 8750ee147940a6637b80ecf7f95062185ad8726c8c28a2295b8ec1160a196f7d

package:
  name: numba
  version: ${{ version }}

source:
  url: https://pypi.org/packages/source/${{ name[0] }}/${{ name }}/${{ name }}-${{ version }}.tar.gz
  sha256: ${{ sha256 }}

build:
  number: 2
  skip: match(python, "<3.10")
  script:
    - if: linux
      then: export CC="${CC} -pthread"
    - if: linux
      then: export CXX="${CXX} -pthread"
    - ${{ PYTHON }} -m pip install . --no-deps --ignore-installed -vvv
  python:
    entry_points:
      - numba = numba.misc.numba_entry:main

requirements:
  build:
    - if: build_platform != target_platform
      then: python
    - if: build_platform != target_platform
      then: cross-python_${{ target_platform }}
    - if: build_platform != target_platform
      then: numpy >=1.24,<2.3
    - ${{ stdlib('c') }}
    - ${{ compiler('c') }}
    - ${{ compiler('cxx') }}
    # llvm is needed for the headers
    - if: osx
      then: llvm-openmp
    - if: linux
      then: libgomp
  host:
    - python
    - pip
    - setuptools
    - llvmlite 0.44.*
    - numpy >=1.24,<2.3
    - tbb-devel 2021.6.0.*
  run:
    - python
    - ${{ pin_compatible('llvmlite', upper_bound='x.x') }}
    # NumPy has lower and upper limits
    - numpy >=1.24,<2.3
  ignore_run_exports:
    by_name:
      - tbb
  run_constraints:
    - ${{ pin_compatible('tbb', upper_bound=None) }}
    - if: x86_64
      then: libopenblas !=0.3.6
    - if: arm64
      then: libopenblas >=0.3.18,!=0.3.20
    - cuda-version >=11.2
    - cudatoolkit >=11.2
    - scipy >=1.0
    - cuda-python >=11.6

tests:
  - python:
      imports:
        - numba
        - numba.core.annotations
        - numba.core.datamodel
        - numba.core.rewrites
        - numba.core.runtime
        - numba.core.typeconv
        - numba.core.typing
        - numba.core.unsafe
        - numba.cuda
        - numba.cuda.cudadrv
        - numba.cuda.kernels
        - numba.cuda.simulator
        - numba.cuda.simulator.cudadrv
        - numba.cuda.tests
        - numba.cuda.tests.cudadrv
        - numba.cuda.tests.cudapy
        - numba.cuda.tests.cudasim
        - numba.cuda.tests.nocuda
        - numba.experimental.jitclass
        - numba.np.ufunc
        - numba.scripts
        - numba.testing
        - numba.tests
        - numba.tests.npyufunc
  - script:
      - if: win
        then: run_test.bat
        else: run_test.sh
    requirements:
      run:
        - pip
        - jinja2
        - cffi
        - scipy
        - if: linux and x86_64
          then: numpy !=1.26.0
        - ipython
        - setuptools
        - tbb
        - ${{ compiler('c') }}
        - ${{ compiler('cxx') }}

about:
  license: BSD-2-Clause
  license_file: LICENSE
  summary: NumPy aware dynamic Python compiler using LLVM
  description: |
    Numba is an Open Source NumPy-aware optimizing compiler for Python
    sponsored by Anaconda, Inc. It uses the remarkable LLVM compiler
    infrastructure to compile Python syntax to machine code."
  homepage: http://numba.pydata.org
  repository: https://github.com/numba/numba
  documentation: http://numba.pydata.org/

extra:
  recipe-maintainers:
    - souravsingh
    - marcelotrevisani
    - henryiii
    - mbargull
    - jakirkham
    - step21
